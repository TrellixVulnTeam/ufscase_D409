y <- seq(-5,5,by=0.05)
# Q1________________________________________________________________________________
# define nw estimator with gaussian kernel
mx_gauss <- function(t, h){
sum(dnorm(x0-t,0,h)*y0)/sum(dnorm(x0-t,0,h))
}
# define nw estimator with gaussian kernel
mx_unif <- function(t, h){
indicator <- ifelse(abs((x0-t)/h) <= 1,1,0)
sum(1/h *indicator *y0)/sum(1/h *indicator)
}
# part 1____________________________________________________________________________
# set small bandwidth
h <- 0.1
# plot data
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-6,6),ylim=c(-4,6))
# plot nw estimator curve with gaussian kernel
curve(sapply(x,mx_gauss, h=h),add=T,col='red')
# plot true curve
curve(x/2+x^2/20,lty=2,add=T)
# part 2____________________________________________________________________________
# set large bandwidth
h <- 10
# plot data
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-6,6),ylim=c(-4,6))
# plot nw estimator curve with gaussian kernel
curve(sapply(x,mx_gauss, h=h),add=T,col='red')
# plot true curve
curve(x/2+x^2/20,lty=2,add=T)
# part 3____________________________________________________________________________
# set small bandwidth
h <- 0.1
# plot data
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-6,6),ylim=c(-4,6))
# plot nw estimator curve with uniform kernel
curve(sapply(x,mx_unif, h=h),add=T,col='red')
# plot true curve
curve(x/2+x^2/20,lty=2,add=T)
# part 4____________________________________________________________________________
# set large bandwidth
h <- 10
# plot data
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-6,6),ylim=c(-4,6))
# plot nw estimator curve with uniform kernel
curve(sapply(x,mx_unif, h=h),add=T,col='red')
# plot true curve
curve(x/2+x^2/20,lty=2,add=T)
# Q2________________________________________________________________________________
X <- matrix(1,n,2)
X[,2] <- x0
Y <- y0
# function for local linear regression
mx.ll <- function(t, h){
W <- matrix(0,n,n)
diag(W) <- dnorm(x0-t,0,h)
beta <- solve(t(X)%*% W %*% X) %*% (t(X) %*% W %*% Y)
beta0 <- beta[1]
beta1 <- beta[2]
return(beta0 + beta1*t)
}
# set bandwidth
h <- n^(-1/5)
# plot data
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-6,6),ylim=c(-4,6))
# plot local linear regression curve with gaussian kernel
curve(sapply(x,mx.ll, h=h),add=T,col='red')
# plot true curve
curve(x/2+x^2/20,lty=2,add=T)
# define cv function
cv <- function(h){
mx.list <- rep(NA,n)
for (i in 1:n){
X <- matrix(1,n-1,2)
X[,2] <- x0[-i]
Y <- y0[-i]
W <- matrix(0,n-1,n-1)
diag(W) <- dnorm(x0[-i]-x0[i],0,h)
beta <- solve(t(X)%*% W %*% X) %*% (t(X) %*% W %*% Y)
mx.list[i] <- beta[1] + beta[2]*x0[i]
}
return(mean((mx.list-y0)^2))
}
h.list <- seq(0.5,5,by=0.05)
cv.list <- sapply(h.list,cv)
plot(h.list,cv.list)
# clean env
rm(list = ls())
# set seed
set.seed(50)
# initialize parameters and generate data
n <- 50
epsilon <- rnorm(n)
x0 <- runif(n, -5, 5)
y0 <- x0^2 /20 + x0 / 2 + epsilon
x <- seq(-6,6,by=0.05)
y <- seq(-5,5,by=0.05)
# Q1________________________________________________________________________________
# define nw estimator with gaussian kernel
mx_gauss <- function(t, h){
sum(dnorm(x0-t,0,h)*y0)/sum(dnorm(x0-t,0,h))
}
# define nw estimator with gaussian kernel
mx_unif <- function(t, h){
indicator <- ifelse(abs((x0-t)/h) <= 1,1,0)
sum(1/h *indicator *y0)/sum(1/h *indicator)
}
# part 1____________________________________________________________________________
# set small bandwidth
h <- 0.1
# plot data
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-6,6),ylim=c(-4,6))
# plot nw estimator curve with gaussian kernel
curve(sapply(x,mx_gauss, h=h),add=T,col='red')
# plot true curve
curve(x/2+x^2/20,lty=2,add=T)
# part 2____________________________________________________________________________
# set large bandwidth
h <- 10
# plot data
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-6,6),ylim=c(-4,6))
# plot nw estimator curve with gaussian kernel
curve(sapply(x,mx_gauss, h=h),add=T,col='red')
# plot true curve
curve(x/2+x^2/20,lty=2,add=T)
# part 3____________________________________________________________________________
# set small bandwidth
h <- 0.1
# plot data
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-6,6),ylim=c(-4,6))
# plot nw estimator curve with uniform kernel
curve(sapply(x,mx_unif, h=h),add=T,col='red')
# plot true curve
curve(x/2+x^2/20,lty=2,add=T)
# part 4____________________________________________________________________________
# set large bandwidth
h <- 10
# plot data
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-6,6),ylim=c(-4,6))
# plot nw estimator curve with uniform kernel
curve(sapply(x,mx_unif, h=h),add=T,col='red')
# plot true curve
curve(x/2+x^2/20,lty=2,add=T)
# Q2________________________________________________________________________________
X <- matrix(1,n,2)
X[,2] <- x0
Y <- y0
# function for local linear regression
mx.ll <- function(t, h){
W <- matrix(0,n,n)
diag(W) <- dnorm(x0-t,0,h)
beta <- solve(t(X)%*% W %*% X) %*% (t(X) %*% W %*% Y)
beta0 <- beta[1]
beta1 <- beta[2]
return(beta0 + beta1*t)
}
# set bandwidth
h <- n^(-1/5)
# plot data
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-6,6),ylim=c(-4,6))
# plot local linear regression curve with gaussian kernel
curve(sapply(x,mx.ll, h=h),add=T,col='red')
# plot true curve
curve(x/2+x^2/20,lty=2,add=T)
# define cv function
cv <- function(h){
mx.list <- rep(NA,n)
for (i in 1:n){
X <- matrix(1,n-1,2)
X[,2] <- x0[-i]
Y <- y0[-i]
W <- matrix(0,n-1,n-1)
diag(W) <- dnorm(x0[-i]-x0[i],0,h)
beta <- solve(t(X)%*% W %*% X) %*% (t(X) %*% W %*% Y)
mx.list[i] <- beta[1] + beta[2]*x0[i]
}
return(mean((mx.list-y0)^2))
}
h.list <- seq(0.5,5,by=0.05)
cv.list <- sapply(h.list,cv)
plot(h.list,cv.list)
h <- h.list[which.min(cv.list)]
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-6,6),ylim=c(-4,6))
curve(sapply(x,mx.ll),add=T,col='red')
curve(x/2+x^2/20,lty=2,add=T)
h <- h.list[which.min(cv.list)]
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-6,6),ylim=c(-4,6))
curve(sapply(x,mx.ll, h=h),add=T,col='red')
curve(x/2+x^2/20,lty=2,add=T)
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-15,15),ylim=c(-10,10))
curve(sapply(x,mx.ll),add=T,col='red')
curve(x/2+x^2/20,lty=2,add=T)
# plot outside of data range
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('h =',h),xlim=c(-15,15),ylim=c(-10,10))
curve(sapply(x,mx.ll, h=h),add=T,col='red')
curve(x/2+x^2/20,lty=2,add=T)
knn <- function(x,k){
mean(y0[order(abs(x0-x))][1:k])
}
k <- 2
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('k = ',k))
curve(sapply(x,knn, k=k),add=T)
k <- 2
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('k = ',k))
curve(sapply(x,knn, k=k),add=T, col='red')
k <- 20
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('k = ',k))
curve(sapply(x,knn),add=T)
curve(sapply(x,knn, k=k),add=T, col='r')
k <- 20
k <- 20
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('k = ',k))
curve(sapply(x,knn, k=k),add=T, col='red')
cv <- function(k){
mx.list <- rep(NA,n)
for (i in 1:n){
y1 <- y0[-i]
x1 <- x0[-i]
mx.list[i] <- mean(y1[order(abs(x1-x0[i]))][1:k])
}
return(mean((mx.list-y0)^2))
}
k.list <- 2:20
cv.list <- sapply(k.list,cv)
plot(k.list,cv.list)
k <- k.list[which.min(cv.list)]
k.list <- 2:20
cv.list <- sapply(k.list,cv)
plot(k.list,cv.list)
k <- k.list[which.min(cv.list)]
curve(sapply(x,knn, k=k),add=T, col='red')
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('k = ',k))
curve(sapply(x,knn, k=k),add=T, col='red')
?order
knn_med <- function(x){
median(y0[order(abs(x0-x))][1:k])
}
k <- 2
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('k = ',k))
curve(sapply(x,knn_med),add=T)
# knn function with median
knn_med <- function(x){
median(y0[order(abs(x0-x))][1:k])
}
k <- 2
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('k = ',k))
curve(sapply(x,knn_med),add=T, col='r')
k.list <- 2:20
cv.list <- sapply(k.list,cv)
plot(k.list,cv.list)
k <- k.list[which.min(cv.list)]
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('k = ',k))
curve(sapply(x,knn, k=k),add=T, col='red')
k.list <- 2:20
cv.list <- sapply(k.list,cv)
plot(k.list,cv.list)
k <- k.list[which.min(cv.list)]
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('k = ',k))
curve(sapply(x,knn, k=k),add=T, col='red')
# knn function with median
knn_med <- function(x){
median(y0[order(abs(x0-x))][1:k])
}
k <- 2
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('k = ',k))
curve(sapply(x,knn_med),add=T, col='red')
k.list <- 2:20
cv.list <- sapply(k.list,cv)
plot(k.list,cv.list)
k <- k.list[which.min(cv.list)]
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('k = ',k))
curve(sapply(x,knn, k=k),add=T, col='red')
cv <- function(k){
mx.list <- rep(NA,n)
for (i in 1:n){
y1 <- y0[-i]
x1 <- x0[-i]
mx.list[i] <- median(y1[order(abs(x1-x0[i]))][1:k])
}
return(mean((mx.list-y0)^2))
}
k.list <- 2:20
cv.list <- sapply(k.list,cv)
plot(k.list,cv.list)
k <- k.list[which.min(cv.list)]
plot(x0,y0,pch=16,col='gray',cex=.8,main=paste('k = ',k))
curve(sapply(x,knn, k=k),add=T, col='red')
# clean env
rm(list = ls())
# set seed
set.seed(50)
# generate and plot data
n <- 200
x <- runif(n,-5,4)
y <- (x-2)*(x+4)*(x-3)*(x+3) + rnorm(n,0,10)
plot(x,y,pch=16,cex=.8,col='gray')
curve((x-2)*(x+4)*(x-3)*(x+3),add=T,lty=2,lwd=2)
# natural cubic spline
library(splines)
xi <- c(-3,-1,1,3)
fit <- lm(y~ns(x,knots=xi))
plot(x,y,pch=16,cex=.8,col='gray',main='Natrual cubic spline',xlim=c(-5,5),ylim=c(-30,180))
curve((x-2)*(x+4)*(x-3)*(x+3),add=T,lty=2,lwd=2)
abline(v=xi,lty=2,col='red')
x.seq <- seq(-6,6,by=0.1)
lines(x.seq,predict(fit,data.frame(x=x.seq)), col='red',lwd=2)
points(x,y,pch=16,cex=.8,col='gray')
fit <- smooth.spline(x,y,lambda=0.0000005)
plot(x,y,pch=16,cex=.8,col='gray',main='Smoothing spline, lambda=5e-6')
curve((x-2)*(x+4)*(x-3)*(x+3),add=T,lty=2,lwd=2)
lines(fit, col='red',lwd=2)
fit <- smooth.spline(x,y)
fit$lambda
plot(x,y,pch=16,cex=.8,col='gray',main='Smoothing spline, lambda=5e-6')
curve((x-2)*(x+4)*(x-3)*(x+3),add=T,lty=2,lwd=2)
lines(fit, col='red',lwd=2)
# clean env
rm(list = ls())
# set seed
set.seed(50)
# generate and plot data
x <- 1:1024/1025
y <- sqrt(x*(1-x)) *sin(2.1*pi/(x+0.05))
plot(x, y, type = 'l', xlab = "x", ylab = "Doppler")
# import package
library(wavethresh)
install.packages("wavethresh")
# import package
library(wavethresh)
# plot Haar decomp
ws.haar <- wd(y, filter.number = 1, family = "DaubExPhase")
plot(ws.haar)
plot(ws.haar,scaling = 'by.level')
# plot symmlet-p decomp
ws.s8 <- wd(y, filter.number=8, family="DaubLeAsymm")
plot(ws.s8)
plot(ws.s8,scaling = 'by.level')
##########################################################################################
rm(list=ls())     # Clean memory
graphics.off()    # Close graphs
cat("\014")       # Clear Console
# set working directory
setwd("C:/Users/Naam/Desktop/seminar case study/ufscode/UFS1")
?read.csv
TS_data <- read.csv("file_name.csv", sep = ",", header=FALSE)
View(TS_data)
t(TS_data)
dat <- t(TS_data)
View(dat)
TS_data <- t(read.csv("file_name.csv", sep = ",", header=FALSE))
x<-rbind(matrix(rnorm(100,sd=0.1),ncol=2),
matrix(rnorm(100,mean=1,sd=0.2),ncol=2),
matrix(rnorm(100,mean=5,sd=0.1),ncol=2),
matrix(rnorm(100,mean=7,sd=0.2),ncol=2))
x<-rbind(matrix(rnorm(100,sd=0.1),ncol=2),
matrix(rnorm(100,mean=1,sd=0.2),ncol=2),
matrix(rnorm(100,mean=5,sd=0.1),ncol=2),
matrix(rnorm(100,mean=7,sd=0.2),ncol=2))
rm(list=ls())     # Clean memory
graphics.off()    # Close graphs
cat("\014")       # Clear Console
# set working directory
setwd("C:/Users/Naam/Desktop/seminar case study/ufscode/UFS1")
##########################################################################################
TS_data <- t(read.csv("TS_data.csv", sep = ",", header=FALSE))
rm(list=ls())     # Clean memory
graphics.off()    # Close graphs
cat("\014")       # Clear Console
# set working directory
setwd("C:/Users/Naam/Desktop/seminar case study/ufscode/UFS1")
##########################################################################################
TS_data <- t(read.csv("TS_data.csv", sep = ",", header=FALSE))
TS_dm <- read.csv("TS_dm.csv", sep = ",", header=FALSE)
View(TS_dm)
TS_dm <- t(read.csv("TS_dm.csv", sep = ",", header=FALSE))
View(TS_dm)
install.packages("NbClust")
library("NbClust")
# diss_matrix<- dist(x, method = "euclidean", diag=FALSE)
res <- NbClust(TS_data, diss=TS_dm, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "all")
# diss_matrix<- dist(x, method = "euclidean", diag=FALSE)
res <- NbClust(TS_data, diss=TS_dm, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "sihouette")
# diss_matrix<- dist(x, method = "euclidean", diag=FALSE)
res <- NbClust(TS_data, diss=TS_dm, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "silhouette")
# diss_matrix<- dist(x, method = "euclidean", diag=FALSE)
res <- NbClust(TS_data, diss=TS_dm, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "CH")
# diss_matrix<- dist(x, method = "euclidean", diag=FALSE)
res <- NbClust(TS_data, diss=TS_dm, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "ch")
?df
?data.frame
data.frame(TS_data)
TS_data < - data.frame(TS_data)
TS_data < - data.frame(TS_data)
is.data.frame(TS_data)
data.frame(TS_data)
x <- data.frame(TS_data)
View(x)
# diss_matrix<- dist(x, method = "euclidean", diag=FALSE)
res <- NbClust(x, diss=TS_dm, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "all")
# diss_matrix<- dist(x, method = "euclidean", diag=FALSE)
res <- NbClust(x, diss=TS_dm, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "ch")
diss_matrix<- dist(x, method = "euclidean", diag=FALSE)
res <- NbClust(x, diss=diss_matrix, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "ch")
View(res)
res$Best.nc
res <- NbClust(x, diss=diss_matrix, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "all")
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "all")
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "ch")
res$Best.nc
?ncvlust
?nbclust
?NbClust
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "kl")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "ccc")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "scott")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "marriot")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "trcovw")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "tracew")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "friedman")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "rubin")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "cindex")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "db")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "silhouette")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "duda")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "pseudot2")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "beale")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "ratkowsky")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "ball")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "ptbiserial")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "gap")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "frey")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "mcclain")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "gamma")
res$Best.nc
res<-NbClust(x, diss=NULL, distance = "euclidean", min.nc=2, max.nc=10,
method = "ward.D2", index = "gplus")
res$Best.nc
res <- NbClust(x, diss=diss_matrix, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "gplus")
res$Best.nc
res <- NbClust(x, diss=diss_matrix, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "tau")
res$Best.nc
res <- NbClust(x, diss=diss_matrix, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "dunn")
res$Best.nc
res <- NbClust(x, diss=diss_matrix, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "hubert")
res$Best.nc
res <- NbClust(x, diss=diss_matrix, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "sdindex")
res$Best.nc
res <- NbClust(x, diss=diss_matrix, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "dindex")
res$Best.nc
res <- NbClust(x, diss=diss_matrix, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "sdbw")
res$Best.nc
res <- NbClust(x, diss=diss_matrix, distance = NULL, min.nc=2, max.nc=10,
method = "ward.D", index = "ch")
res$Best.nc
